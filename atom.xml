<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时光-流沙</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://leejaywell.github.io/blog/"/>
  <updated>2018-06-04T06:30:39.872Z</updated>
  <id>https://leejaywell.github.io/blog/</id>
  
  <author>
    <name>Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://leejaywell.github.io/blog/2018/06/04/Json-Web-Toekn/"/>
    <id>https://leejaywell.github.io/blog/2018/06/04/Json-Web-Toekn/</id>
    <published>2018-06-04T03:10:19.048Z</published>
    <updated>2018-06-04T06:30:39.872Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>title: Json Web Toekn<br>date: 2018-06-04 11:10:19</p>
<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>JWT是一种用于双方之间传递安全信息的简洁的、URL安全的表述性声明规范。JWT作为一个开放的标准（RFC 7519），定义了一种简洁的，自包含的方法用于通信双方之间以Json对象的形式安全的传递信息。因为数字签名的存在，这些信息是可信的，JWT可以使用HMAC算法或者是RSA的公私秘钥对进行签名。简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库。</p>
<h3 id="2-JWT的结构"><a href="#2-JWT的结构" class="headerlink" title="2. JWT的结构"></a>2. JWT的结构</h3><p>JWT包含了使用.分隔的三部分：<br>Header 头部<br>Payload 负载<br>Signature 签名</p>
<p>结构看起来是这样的Header.Payload.Signature</p>
<p><img src="jwt.png" alt="Json-Web-Toekn\jwt"></p>
<h4 id="2-1-Header"><a href="#2-1-Header" class="headerlink" title="2.1 Header"></a>2.1 Header</h4><p>header中通常包含了两部分：token类型和采用的加密算法。{ “alg”: “HS256”, “typ”: “JWT”}<br>这部分内容使用<strong>Base64Url</strong>编码组成了JWT结构的第一部分。</p>
<h4 id="2-2-Payload"><a href="#2-2-Payload" class="headerlink" title="2.2 Payload"></a>2.2 Payload</h4><p>Token的第二部分是负载，它包含了claim，Claim是一些实体（通常指的用户）的状态和额外的元数据，有三种类型的claim：<em>reserved</em>, <em>public</em> 和 <em>private</em>.<strong>Reserved claims</strong>: 这些claim是JWT预先定义的，在JWT中并不会强制使用它们，而是推荐使用，常用的有 iss（签发者）,exp（过期时间戳）, sub（面向的用户）, aud（接收方）, iat（签发时间）。<br><strong>Public claims</strong>：根据需要定义自己的字段，注意应该避免冲突<br><strong>Private claims</strong>：这些是自定义的字段，可以用来在双方之间交换信息<br>负载使用的例子：{ “sub”: “1234567890”, “name”: “John Doe”, “admin”: true}</p>
<p>负载需要经过<strong>Base64Url</strong>编码后作为JWT结构的第二部分。</p>
<h4 id="2-3-Signature"><a href="#2-3-Signature" class="headerlink" title="2.3 Signature"></a>2.3 Signature</h4><p>创建签名需要使用编码后的header和payload以及一个秘钥，使用header中指定签名算法进行签名。例如如果希望使用HMAC SHA256算法，那么签名应该使用下列方式创建：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HMACSHA256(</div><div class="line">  base64UrlEncode(header) + &quot;.&quot; +</div><div class="line">  base64UrlEncode(payload),</div><div class="line">  secret)</div></pre></td></tr></table></figure>
<h3 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a>3. 使用场景</h3><blockquote>
<p>1、用于向Web应用传递一些非敏感信息。例如完成加好友、下订单的操作等等。</p>
<p>2、用于设计用户认证和授权系统。</p>
<p>3、实现Web应用的单点登录。</p>
</blockquote>
<h4 id="3-1-实例场景"><a href="#3-1-实例场景" class="headerlink" title="3.1 实例场景"></a>3.1 实例场景</h4><p>在A用户关注了B用户的时候，系统发邮件给B用户，并且附有一个链接“点此关注A用户”。链接的地址：</p>
<p><a href="https://your.awesome-app.com/make-friend/?from_user=B&amp;target_user=A" target="_blank" rel="external">https://your.awesome-app.com/make-friend/?from_user=B&amp;target_user=A</a></p>
<p>让B用户不用登录就可以完成这个操作。</p>
<h4 id="3-2-登陆场景"><a href="#3-2-登陆场景" class="headerlink" title="3.2 登陆场景"></a>3.2 登陆场景</h4><p>在传统的用户登录认证中，因为http是无状态的，所以都是采用session方式。用户登录成功，服务端会保证一个session，当然会给客户端一个sessionId，客户端会把sessionId保存在cookie中，每次请求都会携带这个sessionId。</p>
<p><img src="sesseion login.jpg" alt="Json-Web-Toekn\sesseion login"></p>
<p>cookie+session这种模式通常是保存在内存中，而且服务从单服务到多服务会面临的session共享问题，随着用户量的增多，开销就会越大。而JWT不是这样的，只需要服务端生成token，客户端保存这个token，每次请求携带这个token，服务端认证解析就可。</p>
<p><img src="jwt login.jpg" alt="Json-Web-Toekn\jwt login"></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: Json Web Toekn&lt;br&gt;date: 2018-06-04 11:10:19&lt;/p&gt;
&lt;h2 id=&quot;tags&quot;&gt;&lt;a href=&quot;#tags&quot; class=&quot;headerlink&quot; title=&quot;tags:&quot;&gt;&lt;/a&gt;tags:&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java基础之ClassLoader</title>
    <link href="https://leejaywell.github.io/blog/2017/09/30/Java-ClassLoader/"/>
    <id>https://leejaywell.github.io/blog/2017/09/30/Java-ClassLoader/</id>
    <published>2017-09-30T06:32:45.000Z</published>
    <updated>2018-01-23T02:47:19.007Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h2 id="Java基础之ClassLoader"><a href="#Java基础之ClassLoader" class="headerlink" title="Java基础之ClassLoader"></a>Java基础之ClassLoader</h2><h4 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h4><p>开发人员对Java.lang.ClassNotFoundExeption这个异常肯定都不陌生，想要详细了解和解决这个问题，<br>  这涉及到Java技术体系中的类加载技术。<br>Java的类加载机制是其体系中比较核心的部分，虽然和大部分开发人员直接打交道不多，但是对其背后的有一定的理解有助于排查程序中出现类加载失败等技术问题，对于理解Java虚拟机的连接模型和<br>  Java语言的动态性都有很大的帮助。</p>
<h4 id="1-2-常见异常"><a href="#1-2-常见异常" class="headerlink" title="1.2 常见异常"></a>1.2 常见异常</h4><ul>
<li>Java.lang.ClassNotFoundExeption</li>
<li>Java.lang.NoClassDefFoundError</li>
<li>Java.lang.NoSuchMethodError</li>
<li>Java.lang.ClassCastException</li>
<li>Java.lang.LinkageError</li>
</ul>
<h4 id="1-3-class加载过程"><a href="#1-3-class加载过程" class="headerlink" title="1.3 class加载过程"></a>1.3 class加载过程</h4><p><img src="class_process.jpg"><br></p>
<p><strong>装载</strong>：通过类的全限定名获取二进制字节流，将二进制流转换成方法去中的运行时数据结构，在内存中生成java.lang.Class对象。</p>
<p><strong>链接</strong>：</p>
<blockquote>
<ul>
<li><strong>校验</strong>：检查导入类或接口的二进制数据的正确性（文件格式验证，元数据验证，字节码验证，符号引用验证）<br></li>
<li><strong>准备</strong>：给类的静态变量分配并初始化存储空间 <br></li>
<li><strong>解析</strong>：将常量池中的符号引用转换成直接引用 <br></li>
</ul>
</blockquote>
<p><strong>初始化</strong>：激活类的静态变量,初始化代码块和静态代码块，并初始化程序设置的变量值。</p>
<h6 id="1-3-1-类的主动使用"><a href="#1-3-1-类的主动使用" class="headerlink" title="1.3.1 类的主动使用"></a>1.3.1 类的主动使用</h6><p>  <strong>遇到new,getstatic,putstatic,invokestatic这四条字节码指令</strong></p>
<ul>
<li>创建类的实例</li>
<li>访问某个类或接口的静态变量，或者对静态变量赋值</li>
<li>调用某个类的静态方法</li>
<li>反射( 如Class.forName(“”) )</li>
<li>初始化一个类的子类</li>
<li>Java虚拟机启动时被表明为启动类的类(Java Test)</li>
</ul>
<h6 id="1-3-2-分析Class-forName-和ClassLoader-loadClass"><a href="#1-3-2-分析Class-forName-和ClassLoader-loadClass" class="headerlink" title="1.3.2 分析Class.forName()和ClassLoader.loadClass()"></a>1.3.2 分析Class.forName()和ClassLoader.loadClass()</h6></blockquote>
<ul>
<li><p>Class.forName(className)方法，内部实际调用的方法是Class.forName(className,true,classLoader),第二个参数表示类是否需要初始化，Class.forName(className)默认是需要初始化。这表示会触发目标类的static变量和static代码块会被再次初始化。</p>
</li>
<li><p>ClassLoader.loadClass(className)方法，内部实际调用的是它的重载方法ClassLoader.loadClass(className,false);第二参数表示目标对象是否进行链接，false表示不进行链接，不链接就意味着不进行包括初始化等一系列步骤，所以静态变量和静态代码块就不会的到执行。</p>
</li>
</ul>
<blockquote>
<h4 id="1-4-ClassLoader结构简述"><a href="#1-4-ClassLoader结构简述" class="headerlink" title="1.4 ClassLoader结构简述"></a>1.4 ClassLoader结构简述</h4><p>JVM中预定义了三种类加载器，当一个JVM实例启动的时候，JVM缺省开始使用如下三种类型的类加载器：</p>
<blockquote>
<p><strong>启动（Boostrap）类加载器</strong>：引导类装载器是由本地代码实现的类加载器，其负责<java_runtime_home>/lib下面的核心类库或者可以使用<br>    jvm参数-Xbootclasspath选项指定的jar包加载到内存中。<strong>由于引导类加载器涉及到虚拟机本地实现细节，<br>    开发者无法直接获取到启动类加载的引用，所以不允许直接引用进行操作。</strong><br><strong>扩展（Extension）类加载器</strong>：扩展类加载是由Sun的ExtClassLoader（Sun.misc.Launcher$ExtClassLoader）实现的。其负责<br>    将<java_runtime_home>/lib/ext或者由JVM参数-Djava.ext.dir指定位置中的类加载到内存中。开发者可以直接使用标准扩展类记载其。<br><strong>系统（System）类加载</strong>：系统类加载器是由Sun的AppClassLoader（Sun.misc.Launcher$AppClassLoader）是实现的。<br>    其负责将系统类路径java -classpath或-Djava.class.path变量所指的目录下的类库加载到内存中。开发者可以直接使用系统加载器。</java_runtime_home></java_runtime_home></p>
</blockquote>
</blockquote>
<ul>
<li><strong><em>除了以上列举的三种类加载器，还有一种比较特殊的类型就是线程上下文类加载器</em></strong></li>
</ul>
<p><strong>关系图</strong></p>
<center><br>    <img src="classloader-model.png" height="350" width="600"><br><br></center>


<blockquote>
<h4 id="1-5-ClassLoader加载机制"><a href="#1-5-ClassLoader加载机制" class="headerlink" title="1.5 ClassLoader加载机制"></a>1.5 ClassLoader加载机制</h4><p>JVM在加载类的时候默认是采用的是双亲委派机制，通俗的说，<strong>就是某个特定的类加载器在接到类加载的请求时，首先将加载的任务委托给父类加载器，依次类推，如果父类加载器可以完成类加载任务，就成功返回，如果父类加载器无法完成此加载任务时，才自己去加载。</strong> 对于这种加载机制，可以从系统类加载器和扩展类加载器为例简单分析：</p>
</blockquote>
<center><br>    <img src="extclassloader.png"><br><br>    1.扩展类加载器继承关系图<br></center>

<center><br>    <img src="appclassloader.png"><br><br>    2.系统类加载器继承关系图<br></center>

<blockquote>
<h4 id="1-6-类加载器的并行加载和单例模式"><a href="#1-6-类加载器的并行加载和单例模式" class="headerlink" title="1.6 类加载器的并行加载和单例模式"></a>1.6 类加载器的并行加载和单例模式</h4><p> 其实都是通过定义静态的成员变量，以保证instance可以在类初始化的时候被实例化。那为啥让instance在类初始化的时候被实例化就能保证线程安全了呢？因为类的初始化是由ClassLoader完成的，这其实就是利用了ClassLoader的线程安全机制啊。再说静态内部类，这种方式和饿汉方式只有细微差别，只是做法上稍微优雅一点。这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。但是，原理和饿汉一样。</p>
<h4 id="1-7-热加载"><a href="#1-7-热加载" class="headerlink" title="1.7 热加载"></a>1.7 热加载</h4><p>  在 Java 开发领域，热加载一直是一个难以解决的问题，从JDK1.4提供的技术，运行开发人员在debug过程中能够立即重载修改后的class。所有的IDE都支持这个特性（Intellij IDEA，Eclipse，NetBeans)。如果debug应用，并且修改了某些class，jvm会立即载入修改后的class。同样，这个技术也有限制：只允许修改方法体，不允许增加新的class、不允许新增字段、不允许新增方法、不允许修改方法签名。对于整个类的结构修改，仍然需要重启虚拟机，对类重新加载才能完成更新操作。对于某些大型的应用来说，每次的重启都需要花费大量的时间成本。</p>
</blockquote>
<p>  <strong>什么是热加载</strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在不重启 Java 虚拟机的前提下，能自动侦测到 class 文件的变化，更新运行时 class 的行为。</div><div class="line">Java 类是通过 Java 虚拟机加载的，某个类的 class 文件在被 classloader 加载后，会生成对应的 Class 对象，之后就可以创建该类的实例</div></pre></td></tr></table></figure>
<p>  <strong>尝试方案</strong>：</p>
<ul>
<li>把原来的类信息卸载掉，然后重新加载此类</li>
<li><p>新建一个类加载器（new），重新加载此类，不管原来的类信息，等待垃圾回收它</p>
<p><strong>问题</strong>：</p>
<blockquote>
<p>1.改变加载机制?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">默认的虚拟机行为只会在启动时加载类，如果后期有一个类需要更新的话，单纯替换编译的 class 文件，Java 虚拟机是不会更新正在运行的 class。</div><div class="line">如果要实现热部署，最根本的方式是修改虚拟机的源代码，改变 classloader 的加载行为，使虚拟机能监听 class 文件的更新，重新加载 class 文件，这样的行为破坏性很大，为后续的 JVM 升级埋下了一个大坑。</div></pre></td></tr></table></figure>
<p>2.是不是所有的类都能进行热加载呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我们程序的入口类都是系统类加载器加载的，也就是AppClassLoader加载的。当你重新使用系统类加载器加载这个类的时候是不会被重新加载的。</div><div class="line">因为虚拟机会检测这个类是否被加载过，如果已经被加载过，那么就不会重新加载。所以由系统类加载器加载的类，是不能进行热加载的。只有使用我们自定义的类加载器加载的类才能热加载。</div></pre></td></tr></table></figure>
<p>3.自定义类加载器类有什么问题？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">目前的加载机制，称为双亲委派，系统在使用一个 classloader 来加载类时，会先询问当前 classloader 的父类是否有能力加载，如果父类无法实现加载操作，才会将任务下放到该 classloader 来加载。</div><div class="line">这种自上而下的加载方式的好处是，让每个 classloader 执行自己的加载任务，不会重复加载类。但是这种方式却使加载顺序非常难改变，让自定义 classloader 抢先加载需要监听改变的类成为了一个难题。</div><div class="line">虽然无法抢先加载该类，但是仍然可以用自定义 classloader 创建一个功能相同的类，让每次实例化的对象都指向这个新的类。当这个类的 class 文件发生改变的时候，再次创建一个更新的类，之后如果系统再次发出实例化请求，创建的对象讲指向这个全新的类。</div><div class="line">同一个类加载器无法同时加载两个相同名称的类，由于不论类的结构如何发生变化，生成的类名不会变，而 classloader 只能在虚拟机停止前销毁已经加载的类，这样 classloader 就无法加载更新后的类了</div></pre></td></tr></table></figure>
</blockquote>
<p>javaagent除了做字节码上面的修改之外，其实还有一些小功能，有时候还是挺有用的<br>获取所有已经被加载的类：Class[] getAllLoadedClasses();<br>获取所有已经初始化了的类： Class[] getInitiatedClasses(ClassLoader loader);<br>获取某个对象的大小： long getObjectSize(Object objectToSize);<br>将某个jar加入到bootstrap classpath里优先其他jar被加载： void appendToBootstrapClassLoaderSearch(JarFile jarfile);<br>将某个jar加入到classpath里供appclassloard去加载：void appendToSystemClassLoaderSearch(JarFile jarfile);<br>设置某些native方法的前缀，主要在找native方法的时候做规则匹配： void setNativeMethodPrefix(ClassFileTransformer transformer, String prefix)。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;Java基础之ClassLoader&quot;&gt;&lt;a href=&quot;#Java基础之ClassLoader&quot; class=&quot;headerlink&quot; title=&quot;Java基础之ClassLoader&quot;&gt;&lt;/a&gt;Java基础之ClassLoader&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://leejaywell.github.io/blog/2017/08/30/hello-world/"/>
    <id>https://leejaywell.github.io/blog/2017/08/30/hello-world/</id>
    <published>2017-08-30T01:12:05.732Z</published>
    <updated>2017-09-30T06:51:08.757Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h4 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h4><h6 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h6 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h6 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h6 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
